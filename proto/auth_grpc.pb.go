// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: auth.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authentication_PasswordAuth_FullMethodName = "/Authentication/PasswordAuth"
	Authentication_PubkeyAuth_FullMethodName   = "/Authentication/PubkeyAuth"
)

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	PasswordAuth(ctx context.Context, in *AuthPasswordReq, opts ...grpc.CallOption) (*AuthPasswordRes, error)
	PubkeyAuth(ctx context.Context, opts ...grpc.CallOption) (Authentication_PubkeyAuthClient, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) PasswordAuth(ctx context.Context, in *AuthPasswordReq, opts ...grpc.CallOption) (*AuthPasswordRes, error) {
	out := new(AuthPasswordRes)
	err := c.cc.Invoke(ctx, Authentication_PasswordAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) PubkeyAuth(ctx context.Context, opts ...grpc.CallOption) (Authentication_PubkeyAuthClient, error) {
	stream, err := c.cc.NewStream(ctx, &Authentication_ServiceDesc.Streams[0], Authentication_PubkeyAuth_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &authenticationPubkeyAuthClient{stream}
	return x, nil
}

type Authentication_PubkeyAuthClient interface {
	Send(*AuthPubkeyReq) error
	Recv() (*AuthPubkeyRes, error)
	grpc.ClientStream
}

type authenticationPubkeyAuthClient struct {
	grpc.ClientStream
}

func (x *authenticationPubkeyAuthClient) Send(m *AuthPubkeyReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authenticationPubkeyAuthClient) Recv() (*AuthPubkeyRes, error) {
	m := new(AuthPubkeyRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	PasswordAuth(context.Context, *AuthPasswordReq) (*AuthPasswordRes, error)
	PubkeyAuth(Authentication_PubkeyAuthServer) error
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) PasswordAuth(context.Context, *AuthPasswordReq) (*AuthPasswordRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordAuth not implemented")
}
func (UnimplementedAuthenticationServer) PubkeyAuth(Authentication_PubkeyAuthServer) error {
	return status.Errorf(codes.Unimplemented, "method PubkeyAuth not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_PasswordAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).PasswordAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_PasswordAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).PasswordAuth(ctx, req.(*AuthPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_PubkeyAuth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthenticationServer).PubkeyAuth(&authenticationPubkeyAuthServer{stream})
}

type Authentication_PubkeyAuthServer interface {
	Send(*AuthPubkeyRes) error
	Recv() (*AuthPubkeyReq, error)
	grpc.ServerStream
}

type authenticationPubkeyAuthServer struct {
	grpc.ServerStream
}

func (x *authenticationPubkeyAuthServer) Send(m *AuthPubkeyRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authenticationPubkeyAuthServer) Recv() (*AuthPubkeyReq, error) {
	m := new(AuthPubkeyReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasswordAuth",
			Handler:    _Authentication_PasswordAuth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubkeyAuth",
			Handler:       _Authentication_PubkeyAuth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth.proto",
}
